<%
// Form handler to deal with actions on posts in threads, or sometimes
// the thread themselves.
core.app.forum.html.check_ban();
core.net.uri();
core.app.forum.data.thread();
core.app.forum.data.topic();
//core.app.forum.data.deletion();
core.user.auth();
var uri = new URI(request.getURL());
if(request.threadId)
    var thread = app.Forum.data.Thread.findOne({_id: request.threadId});
var selected = [];
for(var i in uri.args){
    if(uri.args[i].key == "select"){
        selected.push(uri.args[i].value);
    }
}

// Which URL should we redirect to? Some handlers change this.
var back = request.getHeader("Referer");
if(back == "")
    back = "./";

var modifyPostCount = function(thread, num){
    // Modifies the post count of a thread, the topic the thread is in,
    // the topic that topic is in, etc.,
    // by num (probably 1 or -1).
    thread.count += num;
    thread.save();

    // FIXME: another cross-reference thing
    topic = db.forum.topics.findOne({_id: thread.topic._id});
    topic.changeCounts(0, num);
    thread.topic = topic;
};

var subtPost = function(attr){
    for(var i in selected){
        var p = thread.getDescendant(selected[i]);
        p.deleted = attr;
        modifyPostCount(thread, -1);
        thread.save();
        thread.saveDescendant(p);
    }
};

var addPost = function(attr){
    for(var i in selected){
        var p = thread.getDescendant(selected[i]);
        if(p.deleted == attr){
            p.deleted = false;
            modifyPostCount(thread, 1);
            thread.save();
            thread.saveDescendant(p);
        }

    }
};

if(request.action == "delete"){
    if(! app.Forum.Controller.hasPermission(user, "deletePost"))
        return Auth.cookie.reject(request, response);
    subtPost("deleted");
}

if(request.action == "undelete"){
    if(! app.Forum.Controller.hasPermission(user, "deletePost"))
        return Auth.cookie.reject(request, response);
    addPost("deleted");
}

if(request.action == "moderate"){
    if(! app.Forum.Controller.hasPermission(user, "moderatePost"))
        return Auth.cookie.reject(request, response);
    subtPost("moderated");
}

if(request.action == "unmoderate"){
    if(! app.Forum.Controller.hasPermission(user, "moderatePost"))
        return Auth.cookie.reject(request, response);
    addPost("moderated");
}

if(request.action == "sticky"){
    if(! app.Forum.Controller.hasPermission(user, "stickyThread"))
        return Auth.cookie.reject(request, response);
    log.app.forum.thread_action.debug("stickifying " + selected);
    selected.forEach(function(sel1){
        var thread = app.Forum.data.Thread.findOne({_id: sel1});
        thread.pinned = true;
        thread.save();
    });
}

if(request.action == "unsticky"){
    if(! app.Forum.Controller.hasPermission(user, "stickyThread"))
        return Auth.cookie.reject(request, response);
    selected.forEach(function(sel1){
        var thread = app.Forum.data.Thread.findOne({_id: sel1});
        thread.pinned = false;
        thread.save();
    });
}

if(request.action == "split"){
    if(! app.Forum.Controller.hasPermission(user, "movePost")){
        return Auth.cookie.reject(request, response);
    }
    if(! request.target)
        return core.app.forum.post_split(thread, selected);
    else {
        var newthread = new app.Forum.data.Thread();
        var postid = "";
        newthread.topic = thread.topic;
        selected.forEach(function(sel1){
            var post = thread.getDescendant(sel1);
            thread.removeDescendant(sel1);
            newthread.addReply(post);
            postid = post.getID();
        });
        log(tojson(newthread));
        newthread.findFirstPost().title = request.target;
        newthread.latestPost = postid;
        newthread.save();
        thread.save();
        back = uri.clearArgs().replaceLastPath("viewtopic").addQuery("name", thread.topic.name).toString();

    }
}

response.setResponseCode(301);
response.setHeader("Location", back);
%>
