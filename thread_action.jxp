<%
// Form handler to deal with actions on posts in threads, or sometimes
// the thread themselves.
// Doesn't actually render; just redirect.
core.app.forum.html.check_ban();
core.net.uri();
core.app.forum.data.thread();
core.app.forum.data.topic();
//core.app.forum.data.deletion();
core.user.auth();
var uri = new URI(request.getURL());
if(request.threadId)
    var thread = app.Forum.data.Thread.findOne({_id: request.threadId});
var selected = [];
for(var i in uri.args){
    if(uri.args[i].key == "select"){
        selected.push(uri.args[i].value);
    }
}

// Which URL should we redirect to? Some handlers change this.
var back = request.getHeader("Referer");
if(back == "")
    back = "./";

var subtPost = function(attr){
    for(var i in selected){
        thread.removePost(attr, i);
    }
};

var addPost = function(attr){
    for(var i in selected){
        thread.addPost(attr, i);
    }
};

if(request.action == "delete"){
    if(! app.Forum.Controller.hasPermission(user, "deletePost"))
        return Auth.cookie.reject(request, response);
    subtPost("deleted");
}

if(request.action == "undelete"){
    if(! app.Forum.Controller.hasPermission(user, "deletePost"))
        return Auth.cookie.reject(request, response);
    addPost("deleted");
}

if(request.action == "moderate"){
    if(! app.Forum.Controller.hasPermission(user, "moderatePost"))
        return Auth.cookie.reject(request, response);
    subtPost("moderated");
}

if(request.action == "unmoderate"){
    if(! app.Forum.Controller.hasPermission(user, "moderatePost"))
        return Auth.cookie.reject(request, response);
    addPost("moderated");
}

if(request.action == "sticky"){
    if(! app.Forum.Controller.hasPermission(user, "stickyThread"))
        return Auth.cookie.reject(request, response);
    log.app.forum.thread_action.debug("stickifying " + selected);
    selected.forEach(function(sel1){
        var thread = app.Forum.data.Thread.findOne({_id: sel1});
        thread.pinned = true;
        thread.save();
    });
}

if(request.action == "unsticky"){
    if(! app.Forum.Controller.hasPermission(user, "stickyThread"))
        return Auth.cookie.reject(request, response);
    selected.forEach(function(sel1){
        var thread = app.Forum.data.Thread.findOne({_id: sel1});
        thread.pinned = false;
        thread.save();
    });
}

if(request.action == "split"){
    if(! app.Forum.Controller.hasPermission(user, "movePost")){
        return Auth.cookie.reject(request, response);
    }
    if(! request.topic)
        return core.app.forum.post_split(thread, selected);
    else {
        var newthread = new app.Forum.data.Thread();
        var postid = "";
        newthread.topic = db.forum.topics.findOne( { _id : request.topic });
        var first = selected[0];
        var replies = thread.getReplies();
        var i = replies.indexOf(thread.getDescendant(first));
        for(; i < replies.length; i++){
            var post = replies[i];
            thread.removeDescendant(post.getID());
            newthread.addReply(post);
            postid = post.getID();
        }

        log(tojson(newthread));
        newthread.setTitle(request.subj);
        newthread.latestPost = postid;
        var newthreadcount = newthread.getReplies().length;
        var threadcount = thread.getReplies().length;
        var threaddown = thread.count - threadcount;
        var newup = newthreadcount - 1; // thread.count starts at 1

        newthread.save();

        thread.threaded_reorderChildren();
        thread.save();

        thread.modifyPostCount(-threaddown);
        newthread.topic.changeCounts(1, 1);
        newthread.modifyPostCount(newup);

        back = uri.clearArgs().replaceLastPath("viewthread").addQuery("id", newthread._id).toString();
    }
}

if(request.action == "edit") {
    if(! app.Forum.Controller.hasPermission(user, "editThread")){
        return Auth.cookie.reject(request, response);
    }
    if(request.ttl != "") {
        thread.setTitle(request.ttl);
    }
    closed = (request.closed == 1) ? true : false;
    thread.setClosed(closed);

    thread.save();
}

response.setResponseCode(301);
response.setHeader("Location", back);
%>
