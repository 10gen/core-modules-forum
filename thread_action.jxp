<%
// Form handler to deal with actions on posts in threads, or sometimes
// the thread themselves.
// Doesn't actually render; just redirect.

// Silence during the imports!
    oldprint = print;
print = function(){};

Forum.root.html.check_ban();
Forum.root.data.thread();
core.net.url();

print = oldprint;

if(request.threadId)
    var thread = Forum.data.Thread.findOne({_id: request.threadId});
var selected = [];

// FIXME: are these all AJAX handlers? If so, don't redirect at all.

var url = new URL(request.getURL());
/*    for(var i in url.args){
        if(url.args[i].key == "select"){
            selected.push(url.args[i].value);
        }
    }*/

for(var i in request) {
     if(i == "select")
          selected.push(request[i]);
}



// Which URL should we redirect to? Some handlers change this.
var back = request.getHeader("Referer");
if(back == "")
    back = "./";

var subtPost = function(attr){
    for(var i in selected){
        thread.removePost(attr, selected[i]);
    }
};

var addPost = function(attr){
    for(var i in selected){
        thread.addPost(attr, selected[i]);
    }
};


// FIXME: be sure to ensure that all the requirements are correct!
// i.e. Check that count > 1 if deleting, moderating, or splitting,
// check that you aren't splitting on the first post, etc.

if(request.action == "delete"){
    if(! Forum.Controller.hasPermission(user, "deletePost"))
        return Auth.cookie.reject(request, response);
    subtPost("deleted");
    print([thread.count, thread.getFirstNotDeleted().getID()].join('&'));
    return;
}

if(request.action == "undelete"){
    if(! Forum.Controller.hasPermission(user, "deletePost"))
        return Auth.cookie.reject(request, response);
    addPost("deleted");
    var canSplit = Forum.Controller.hasPermission(user, "splitPost");
    var canDelete = Forum.Controller.hasPermission(user, "deletePost");
    var canModerate = Forum.Controller.hasPermission(user, "moderatePost");
    print([thread.count, thread.getFirstNotDeleted().getID()].join('&'));
    print('&');
    Forum.html.form.makePostOptions(canSplit, canDelete, canModerate, thread).actions[0](thread.getDescendant(selected[0]));
    return;
}

if(request.action == "moderate"){
    if(! Forum.Controller.hasPermission(user, "moderatePost"))
        return Auth.cookie.reject(request, response);
    subtPost("moderated");
    print([thread.count, thread.getFirstNotDeleted().getID()].join('&'));
    return;
}

if(request.action == "unmoderate"){
    if(! Forum.Controller.hasPermission(user, "moderatePost"))
        return Auth.cookie.reject(request, response);
    addPost("moderated");
    var canSplit = Forum.Controller.hasPermission(user, "splitPost");
    var canDelete = Forum.Controller.hasPermission(user, "deletePost");
    var canModerate = Forum.Controller.hasPermission(user, "moderatePost");
    print([thread.count, thread.getFirstNotDeleted().getID()].join('&'));
    print('&');
    Forum.html.form.makePostOptions(canSplit, canDelete, canModerate, thread).actions[0](thread.getDescendant(selected[0]));
    return;
}

if(request.action == "sticky"){
    if(! Forum.Controller.hasPermission(user, "stickyThread"))
        return Auth.cookie.reject(request, response);
    selected.forEach(function(sel1){
        var thread = Forum.data.Thread.findOne({_id: sel1});
        thread.pinned = true;
        thread.save();
    });
}

if(request.action == "unsticky"){
    if(! Forum.Controller.hasPermission(user, "stickyThread"))
        return Auth.cookie.reject(request, response);
    selected.forEach(function(sel1){
        var thread = Forum.data.Thread.findOne({_id: sel1});
        thread.pinned = false;
        thread.save();
    });
}

if(request.action == "split"){
    if(! Forum.Controller.hasPermission(user, "movePost")){
        return Auth.cookie.reject(request, response);
    }
    if(! request.subject)
        return Forum.root.post_split(thread, selected);
    else {
        var newthread = new Forum.data.Thread();
        var postid = "";
        if(request.topic){
            newthread.topic = db.forum.topics.findOne( { _id : request.topic });
        }
        else {
            newthread.topic = thread.topic;
        }
        var first = selected[0];
        var replies = thread.getReplies();
        var i = replies.indexOf(thread.getDescendant(first));
        for(; i < replies.length; i++){
            var post = replies[i];
            thread.removeDescendant(post.getID());
            newthread.addReply(post);
            postid = post.getID();
        }

        newthread.setTitle(request.subject);
        newthread.latestPost = postid;
        var newthreadcount = newthread.getReplies().length;
        var threadcount = thread.getReplies().length;
        var threaddown = thread.count - threadcount;
        var newup = newthreadcount - 1; // thread.count starts at 1

        newthread.save();

        thread.threaded_reorderChildren();
        replies = thread.getReplies();
        thread.latestPost = replies[replies.length-1].getID();
        thread.save();

        thread.modifyPostCount(-threaddown);
        newthread.topic.changeCounts(1, 1);
        newthread.modifyPostCount(newup);

        back = url.clearArgs().replaceLastPath("viewthread").addQuery("id", newthread._id).toString();
    }
}

if(request.action == "edit") {
    if(! Forum.Controller.hasPermission(user, "editThread")){
        return Auth.cookie.reject(request, response);
    }
    if(request.ttl != "") {
        thread.setTitle(request.ttl);
    }
    closed = (request.closed == "on") ? true : false;
    thread.setClosed(closed);
    print(Forum.Controller.canPost(thread) + "&" + Forum.html.form.postForm(true) + "&" + thread.getTitle());

    thread.save();
    return;
}

response.setResponseCode(301);
response.setHeader("Location", back);
%>
