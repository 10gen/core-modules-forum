<% /**
*      Copyright (C) 2008 10gen Inc.
*  
*    Licensed under the Apache License, Version 2.0 (the "License");
*    you may not use this file except in compliance with the License.
*    You may obtain a copy of the License at
*  
*       http://www.apache.org/licenses/LICENSE-2.0
*  
*    Unless required by applicable law or agreed to in writing, software
*    distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*    See the License for the specific language governing permissions and
*    limitations under the License.
*/ %>

<%

/**
 * Container object for various form methods.
 */
Forum.html.form = {};
function stickyForm(id, action, text) { %>
<input type="submit" id="stickyform_<%= id %>" onclick="sticky('<%= id %>', '<%= action %>')" value="<%= text %>">
<% }

function editorPick(thread) {
         if(thread.editorPick) { %>
                <input type="checkbox" class="edPick" id="check<%= thread._id %>" onclick="togglePick('<%= thread._id %>')" checked>
         <% } else { %>
                <input type="checkbox" class="edPick" id="check<%= thread._id %>" onclick="togglePick('<%= thread._id %>')">
         <% }
}

/**
 * Generate a bunch of option tags for the tree of forum topics.
 * @param {Forum.data.Topic} topic the topic to start from
 * @param {number} indent the number of spaces to indent
 * @param {Function} filter which elements to skip
 * @param {Function} select callback to determine which element to mark as
 *   selected
 * @return {string} a chunk of HTML
 */
Forum.html.exploreTopic = function(topic, indent, filter, select){
    retStr = "";
    indent = indent || 0;
    istr = "";
    if(! filter(topic)) return;
    for(var i = 0; i < indent; i++){
        istr += "&nbsp;";
    }
    var selected = (select(topic))? " selected=\"1\"" : "";
    retStr+="<option value=\""+topic._id+"\""+selected+">"+istr+content.HTML.escape(topic.name);
    if(topic.hidden) retStr += " (hidden)";
    retStr += "</option>";
    var subtopics = db.forum.topics.find( { parent : topic }).toArray();
    for(var j=0; j<subtopics.length; j++) {
        retStr += Forum.html.exploreTopic(subtopics[j], indent + 2, filter, select);
    }
    return retStr;
};


/**
 * Create an action which, given an object, generates an HTML select
 * for all topics it could move to, recursively.
 *
 * "Actions" are used in topicTable.jxp, which creates rows for each of many
 * elements. An "action" is a callback which is called on each row and
 * can generate HTML to insert in each row. This function returns an action,
 * which is itself a function. The returned action calls out to exploreTopic to
 * crawl the tree of topics, and merely supplies a function to prune and a
 * function to mark as selected; these functions are "generated" to "wrap" the
 * functions given to selectify.
 *
 * If this seems too hard or a mess, that's because it is.
 *
 * @param {Array} choices the array of topics, including possible special topics
 *   for "Deleted" and "Moderated"
 * @param {Function} attrfunc  a function which takes the object and returns a
 *   mapping which is converted to attributes for the select object.
 *
 * @param {Object} options a bunch of fields, including <dl>
 * <dt>filter</dt><dd>a function which takes the object we're generating
 * the select for and the choice we're putting in the select and returns
 * false to prune or true to not-prune that choice</dd>
 * <dt>select</dt><dd>a function which takes the object we're generating the
 * select for and the choice we're generating an option for and returns
 * true if this option should be marked as selected</dd>
 * </dl>
 * @return {Function} an "action" which is called on each element of a row
 */
Forum.html.selectify = function(choices, attrfunc, options){

    //this is a psuedo topic and cannot be moved
    var deleteThread = Forum.Controller.hasPermission(user, "deleteThread");
    var moderateThread = Forum.Controller.hasPermission(user, "moderateThread");

    attrfunc = attrfunc || function (){ return {}; };
    options = options || {};
    var filter = (options.filter == null) ? function(){return true;} : options.filter;
    var select = (options.select == null) ? function(){return false;} : options.select;
    // return an action, which is a function which is called on each of several rows.
    return function(t){
        var retStr = "<select " +Util.format_htmlattr(attrfunc(t)) + ">";
        retStr+="<option value=\"\">&nbsp;</option>";
        for(i=0; i<choices.length; i++) {
            // Create new functions for exploreTopic which close over the thread.
            retStr += Forum.html.exploreTopic(choices[i], 0, function(choice){ return filter(t, choice); },
                                                  function(choice){ return select(t, choice); });
        }
        return retStr +"</select>";
    }
};



var suffix = "able|ible|al|ial|ed|en|er|est|ful|ic|ing|ion|tion|ation|ition|ity|ty|ive|ative|itive|less|ly|ment|ness|ous|eous|ious|s|es|y";
var prefix = "anti|de|dis|en|em|fore|in|im|il|ir|inter|mid|mis|non|over|pre|re|semi|sub|super|trans|un|under";

core.text.stem();

/**
 * Highlight a search term in a block of text.
 * @param {string} text a block of text to look through
 * @param {string} searchTerm a bit of text to look for
 * @return {string} the given text, with instances of the searchTerm put in
 *   &lt;span class="highlight"&gt; elements
 */
Forum.html.highlight = function(result, searchterm) {
    if(result == null || searchterm == null || searchterm == "")
        return;

    searchterm = Search.queryToArray(searchterm);

    for(var i=0; i<searchterm.length; i++) {
        var stem = Stem.stem(searchterm[i]);

        // go through result, replacing search terms with highlighted search terms
        var reg = new RegExp("(\\b)(("+prefix+")?"+stem+"("+suffix+")?)(\\b)", "gi");
        result = result.replace(reg, "$1<span class=\"highlight\">$2</span>$5");

    }
    return result;
}


/**
 * Generate a form for hiding/unhiding a topic.
 *
 * @param {Forum.data.Topic} topic a topic to generate a button for
 * @param {Function} filter a filter to specify which topics to skip (typically the Deleted and Moderated topics cannot be hidden)
 */
Forum.html.form.hidden = function(topic, filter){
         if(filter == null || !filter(topic)) {
         if(topic.hidden) { %>
                <input type="button" class="button hidden" id="but<%= topic._id %>" onclick="toggleHide('<%= topic._id %>')" value="Unhide">
         <% } else { %>
                <input type="button" class="button hidden" id="but<%= topic._id %>" onclick="toggleHide('<%= topic._id %>')" value="Hide">
         <% }
         }
         else {
               print("&nbsp;");
         }
}

/**
 * Generate the HTML form to submit a search.
 */
// not documenting unused parameter
Forum.html.search = function(location) {
         %>
         <form action="search.jxp" class="search">
                <script type="text/javascript"> function clearBox() { document.getElementById("search").value = ""; } </script>
                <input type="text" class="text" name="query" value="search posts in forum" id="search" onclick="clearBox()">
                <input type="submit" class="submit" value="Go">
         </form>
         <%
}

// Returns an array of topics, arranged from least to most specific, given a starting topic
// FIXME: the same as Forum.data.Topic.prototype.getAncestors, except without
// the last topic
Forum.html.topicStack = function(tempTopic) {
     var topicStack = [];
     while(tempTopic.parent) {
         tempTopic = tempTopic.parent;
         topicStack.push(tempTopic.name);
     }
     return topicStack.reverse();
}

// unexposed
/*
 * Renders the breadcrumb trail for a given array of ancestors.
 */
Forum.html.decorateBreadcrumb = function(arr) {
     for(var i=0; i<arr.length; i++)
         print('<div class="mid_level top_level"><a href="viewtopic?name='+URL.escape_queryargs(arr[i])+'">'+content.HTML.escape(arr[i])+' </a></div>');
}

// unexposed
/*
 * Render the beginning of the breadcrumb "table", which is actually a div
 */
Forum.html.startBreadcrumbTable = function() {
    %>
    <div class="breadcrumbs">
    <a href="index.jxp">Forums </a> &gt;
    <%
}

// unexposed
/*
 * Render the end of the breadcrumb "table"
 */
Forum.html.endBreadcrumbTable = function() {
     %>
 	</div>
     <%
}

/**
 * Render the breadcrumbs for a topic.
 * Renders the whole table, including this last topic.
 * @param {Forum.data.Topic} topic the topic to render breadcrumbs for
 */
Forum.html.topicBreadcrumb = function(topic) {
    Forum.html.startBreadcrumbTable();
    Forum.html.decorateBreadcrumb(Forum.html.topicStack(topic)); %>
    <%= content.HTML.escape(topic.name) %><%
    Forum.html.endBreadcrumbTable();
}

/**
 * Render the breadcrumbs for a thread.
 * Renders the whole shebang, including the thread.
 */
Forum.html.breadcrumb = function(thread) {
    Forum.html.startBreadcrumbTable();
    Forum.html.decorateBreadcrumb(Forum.html.topicStack(thread.topic)); %>
    <a href="viewtopic?name=<%= URL.escape_queryargs( thread.topic.name )%>"><%= content.HTML.escape(thread.topic.name) %></a>
    &gt; <%= content.HTML.escape(thread.getTitle()) %><%
    Forum.html.endBreadcrumbTable();
}

/**
 * Make the options for rendering a thread.
 * Rendering a thread takes a bunch of options, which are passed to each post
 * to control rendering. For example, under normal usage, you don't render
 * deleted posts -- but when the request is to show deleted posts, you show them
 * in a particular way. Additionally, there are a bunch of buttons we might have
 * to render for each post: a delete button, an undelete button, etc.
 *
 * @param {boolean} canSplit true if the user has permissions to split a thread
 * @param {boolean} canDelete true if the user has permissions to delete a post
 * @param {boolean} canModerate true if the user has permissions to moderate a
 *   post
 * @param {Forum.data.Thread} thread the thread to make the action for
 * @return {Object} an object with the following fields<dl>
 * <dt>highlight</dt><dd>whether to highlight a post</dd>
 * <dt>htmlclass</dt><dd>a function to generate the HTML class for a given
 *    element</dd>
 * <dt>filter</dt><dd>a function to specify which posts to render</dd>
 * <dt>actions</dt><dd>{Array} the actions to use when rendering each post</dd>
 * </dl>
 */
Forum.html.form.makePostOptions = function(canSplit, canDelete, canModerate, thread){
    var postoptions = {replyable: false};
    postoptions.highlight = request.highlight;
    postoptions.htmlclass = function(t){ return t.deleted? t.deleted: ""; };

    if(request.show) {
        postoptions.filter = function(p) { if (! p.deleted || p.deleted == request.show) return true;  return false; };
    }
    else {
        postoptions.filter = function(p) { if (p.deleted) return false; return true; };
;
    }
    var reps = thread.getReplies();
    var firstPost = thread.getFirstNotDeleted();

    postoptions.actions = [];
    postoptions.actions.push(function(post) {
        var action_ar = [];
        // If a post is deleted, only show an "undelete" button.
        if(canDelete && post.deleted == "deleted"){
            action_ar.push('<div class="button" onclick="undeletePost(\''+ post.getID() + '\')">Undelete</div>');
        }
        else if(canModerate && post.deleted == "moderated"){
            action_ar.push('<div class="button" onclick="unmoderatePost(\''+post.getID()+'\')">Unmoderate</div>');
        }
        else {
            // Show Split, Delete, Moderate buttons.

            // For each of these buttons, we have various criteria for displaying them
            // which sometimes become invalid as a result of AJAX events, so even
            // if we don't want to display them now, we still send them to the client
            // with style="display: none" and special htmlclasses so that they can be
            // displayed later.
            if(canSplit){
                // For the split button, don't show it if:
                // 1. the post is deleted (htmlclass="postdeleted")
                // 2. the post is the first non-deleted post in the thread (htmlclass="firstpost").

                // If a post more firstly than this one is undeleted or something,
                // tell the client, and they'll show the "firstpost" class.
                // If this post is undeleted, the buttons are refreshed anyhow, so don't worry about it.

                var htmlclass = "";
                if(post.deleted)
                    htmlclass = "postdeleted";
                if(post.getID() == firstPost.getID())
                    htmlclass = "firstpost";
                txt = '<div class="button split' + (htmlclass? (" " + htmlclass) : "") + '" onclick="post='+post.getID()+'; document.getElementById(\'splitterDiv\').style.display=\'block\'; splitter_d.show()"'+

                    (htmlclass? ' style="display: none;"' : '') + '>Split</div>';
                action_ar.push(txt);
            }
            if(canDelete){
                // For the delete button, don't show it if:
                // 1. this is the only post in the thread (htmlclass = "onlypost")

                // If any other post is undeleted or unmoderated, show all
                // "onlypost" nodes.
                // Note that this doesn't deal well with "two admins are
                // deleting/undeleting posts at the same time"!
                var htmlclass = "";
                if(thread.count <= 1)
                    htmlclass = "onlypost";
                txt = '<div class="button delete'+(htmlclass?(" "+htmlclass):"")+'" '+(htmlclass?'style="display: none"':"") +' onclick="deletePost(\''+post.getID()+'\')">Delete</div>';
                action_ar.push(txt);
            }
            if(canModerate){
                // The same as the "delete" button.
                var htmlclass = "";
                if(thread.count <= 1)
                    htmlclass = "onlypost";
                txt = '<div class="button moderate'+(htmlclass?(" "+htmlclass):"")+'" '+(htmlclass?'style="display: none"':"") +' onclick="moderatePost(\''+post.getID()+'\')">Moderate</div>';
                action_ar.push(txt);
            }
        }

    %>
    <div class="caption">
    <%
         print(action_ar.join(""));
    %>
    </div>
    <%
    return "";
    });
    return postoptions;
};

/**
 * Render the reply form for a thread.
 */
// FIXME: use Ext.asstring instead of this "shouldReturn" thing
Forum.html.form.postForm = function(shouldReturn){
    var oldprint = print;
    var s = "";
    if (shouldReturn){
        print = function(text) { s = s + text; };
    }
%>
    <div class="postForm" id="postForm">
         <form id="replyform">
         <div class="field">Your Reply: </div><textarea id="ncontent" rows=10 name="ncontent"></textarea>
         <div class="field"><input type="button" class="enewsbutton" onclick="post()" value="Submit Your Reply"></div>
         </form>
    </div>
<%
    print = oldprint;
    return s;
};
%>
