<%
app.Forum.html.form = {};
function stickyForm(id, action, text) { %>
<input type="submit" id="stickyform_<%= id %>" onclick="sticky('<%= id %>', '<%= action %>')" value="<%= text %>">
<% }

function editorPick(thread) {
         if(thread.editorPick) { %>
                <input type="checkbox" class="edPick" id="check<%= thread._id %>" onclick="togglePick('<%= thread._id %>')" checked>
         <% } else { %>
                <input type="checkbox" class="edPick" id="check<%= thread._id %>" onclick="togglePick('<%= thread._id %>')">
         <% }
}


app.Forum.html.exploreTopic = function(topic, indent, filter, select){
    retStr = "";
    indent = indent || 0;
    istr = "";
    if(! filter(topic)) return;
    for(var i = 0; i < indent; i++){
        istr += "&nbsp;";
    }
    var selected = (select(topic))? " selected=\"1\"" : "";
    retStr+="<option value=\""+topic._id+"\""+selected+">"+istr+content.HTML.escape(topic.name);
    if(topic.hidden) retStr += " (hidden)";
    retStr += "</option>";
    var subtopics = db.forum.topics.find( { parent : topic }).toArray();
    for(var j=0; j<subtopics.length; j++) {
        retStr += app.Forum.html.exploreTopic(subtopics[j], indent + 2, filter, select);
    }
    return retStr;
};


app.Forum.html.selectify = function(choices, attrfunc, options){
    // Create an action which, given an object, generates an HTML select
    // for all topics it could move to, recursively.
    //
    // choices is the array of topics, including possible special topics
    // for "Deleted" and "Moderated".
    //
    // attrfunc is a function which takes the object and returns a mapping
    // which is converted to attributes for the select object.
    //
    // options.filter is a function which takes the object we're generating
    // the select for and the choice we're putting in the select and returns
    // false to prune or true to not-prune that choice.

    //this is a psuedo topic and cannot be moved
    var deleteThread = app.Forum.Controller.hasPermission(user, "deleteThread");
    var moderateThread = app.Forum.Controller.hasPermission(user, "moderateThread");

    attrfunc = attrfunc || function (){ return {}; };
    options = options || {};
    var filter = (options.filter == null) ? function(){return true;} : options.filter;
    var select = (options.select == null) ? function(){return false;} : options.select;
    // return an action, which is a function which is called on each of several rows.
    return function(t){
        var retStr = "<select " +Util.format_htmlattr(attrfunc(t)) + ">";
        retStr+="<option value=\"\">&nbsp;</option>";
        for(i=0; i<choices.length; i++) {
            // Create new functions for exploreTopic which close over the thread.
            retStr += app.Forum.html.exploreTopic(choices[i], 0, function(choice){ return filter(t, choice); },
                                                  function(choice){ return select(t, choice); });
        }
        return retStr +"</select>";
    }
};



var suffix = "able|ible|al|ial|ed|en|er|est|ful|ic|ing|ion|tion|ation|ition|ity|ty|ive|ative|itive|less|ly|ment|ness|ous|eous|ious|s|es|y";
var prefix = "anti|de|dis|en|em|fore|in|im|il|ir|inter|mid|mis|non|over|pre|re|semi|sub|super|trans|un|under";

core.text.stem();

app.Forum.html.highlight = function(result, searchterm) {
    if(result == null || searchterm == null || searchterm == "")
        return;

    searchterm = Search.queryToArray(searchterm);

    for(var i=0; i<searchterm.length; i++) {
        var stem = Stem.stem(searchterm[i]);

        // go through result, replacing search terms with highlighted search terms
        var reg = new RegExp("(\\b)(("+prefix+")?"+stem+"("+suffix+")?)(\\b)", "gi");
        result = result.replace(reg, "$1<span class=\"highlight\">$2</span>$5");

    }
    return result;
}



app.Forum.html.form.hidden = function(topic, filter){
         if(filter == null || !filter(topic)) {
         if(topic.hidden) { %>
                <input type="button" class="button hidden" id="but<%= topic._id %>" onclick="toggleHide('<%= topic._id %>')" value="Unhide">
         <% } else { %>
                <input type="button" class="button hidden" id="but<%= topic._id %>" onclick="toggleHide('<%= topic._id %>')" value="Hide">
         <% }
         }
         else {
               print("&nbsp;");
         }
}

app.Forum.html.search = function(location) {
         %>
         <form action="search.jxp" class="search">
                <script type="text/javascript"> function clearBox() { document.getElementById("search").value = ""; } </script>
                <input type="text" class="text" name="query" value="search posts in forum" id="search" onclick="clearBox()">
                <input type="submit" class="submit" value="Go">
         </form>
         <%
}

// Returns an array of topics, arranged from least to most specific, given a starting topic
app.Forum.html.topicStack = function(tempTopic) {
     var topicStack = [];
     while(tempTopic.parent) {
         tempTopic = tempTopic.parent;
         topicStack.push(tempTopic.name);
     }
     return topicStack.reverse();
}

// decorates topic array
// what this should do is take an array and make the whole table
app.Forum.html.decorateBreadcrumb = function(arr) {
     for(var i=0; i<arr.length; i++)
         print('<div class="mid_level top_level"><a href="viewtopic?name='+URL.escape_queryargs(arr[i])+'">'+content.HTML.escape(arr[i])+' </a></div>');
}

app.Forum.html.startBreadcrumbTable = function() {
    %>
    <table id="style1" cellspacing="0" >
    <tr>
    <th scope="col" class="article">
    <div class="top_level"><a href="index.jxp">forums </a></div>
    <%
}

app.Forum.html.endBreadcrumbTable = function() {
     %>
     </th>
     </tr>
     </table>
     <%
}

app.Forum.html.topicBreadcrumb = function(topic) {
    app.Forum.html.startBreadcrumbTable();
    app.Forum.html.decorateBreadcrumb(app.Forum.html.topicStack(topic)); %>
    <div class="second_level"><%= content.HTML.escape(topic.name) %></div><%
    app.Forum.html.endBreadcrumbTable();
}

app.Forum.html.breadcrumb = function(thread) {
    app.Forum.html.startBreadcrumbTable();
    app.Forum.html.decorateBreadcrumb(app.Forum.html.topicStack(thread.topic)); %>
    <div class="top_level mid_level"><a href="viewtopic?name=<%= URL.escape_queryargs( thread.topic.name )%>"><%= content.HTML.escape(thread.topic.name) %></a></div>
    <div class="second_level"><%= content.HTML.escape(thread.getTitle()) %></div><%
    app.Forum.html.endBreadcrumbTable();
}

app.Forum.html.form.makePostOptions = function(canSplit, canDelete, canModerate, thread){
    var postoptions = {replyable: false};
    postoptions.highlight = request.highlight;
    postoptions.htmlclass = function(t){ return t.deleted? t.deleted: ""; };

    if(request.show) {
        postoptions.filter = function(p) { if (! p.deleted || p.deleted == request.show) return true;  return false; };
    }
    else {
        postoptions.filter = function(p) { if (p.deleted) return false; return true; };
;
    }
    var reps = thread.getReplies();
    var firstPost = thread.getFirstNotDeleted();

    postoptions.actions = [];
    postoptions.actions.push(function(post) {
        var action_ar = [];
        // If a post is deleted, only show an "undelete" button.
        if(canDelete && post.deleted == "deleted"){
            action_ar.push('<div class="button" onclick="undeletePost(\''+ post.getID() + '\')">Undelete</div>');
        }
        else if(canModerate && post.deleted == "moderated"){
            action_ar.push('<div class="button" onclick="unmoderatePost(\''+post.getID()+'\')">Unmoderate</div>');
        }
        else {
            // Show Split, Delete, Moderate buttons.

            // For each of these buttons, we have various criteria for displaying them
            // which sometimes become invalid as a result of AJAX events, so even
            // if we don't want to display them now, we still send them to the client
            // with style="display: none" and special htmlclasses so that they can be
            // displayed later.
            if(canSplit){
                // For the split button, don't show it if:
                // 1. the post is deleted (htmlclass="postdeleted")
                // 2. the post is the first non-deleted post in the thread (htmlclass="firstpost").

                // If a post more firstly than this one is undeleted or something,
                // tell the client, and they'll show the "firstpost" class.
                // If this post is undeleted, the buttons are refreshed anyhow, so don't worry about it.

                var htmlclass = "";
                if(post.deleted)
                    htmlclass = "postdeleted";
                if(post.getID() == firstPost.getID())
                    htmlclass = "firstpost";
                txt = '<div class="button split' + (htmlclass? (" " + htmlclass) : "") + '" onclick="post='+post.getID()+'; document.getElementById(\'splitterDiv\').style.display=\'block\'; splitter_d.show()"'+

                    (htmlclass? ' style="display: none;"' : '') + '>Split</div>';
                action_ar.push(txt);
            }
            if(canDelete){
                // For the delete button, don't show it if:
                // 1. this is the only post in the thread (htmlclass = "onlypost")

                // If any other post is undeleted or unmoderated, show all
                // "onlypost" nodes.
                // Note that this doesn't deal well with "two admins are
                // deleting/undeleting posts at the same time"!
                var htmlclass = "";
                if(thread.count <= 1)
                    htmlclass = "onlypost";
                txt = '<div class="button delete'+(htmlclass?(" "+htmlclass):"")+'" '+(htmlclass?'style="display: none"':"") +' onclick="deletePost(\''+post.getID()+'\')">Delete</div>';
                action_ar.push(txt);
            }
            if(canModerate){
                // The same as the "delete" button.
                var htmlclass = "";
                if(thread.count <= 1)
                    htmlclass = "onlypost";
                txt = '<div class="button moderate'+(htmlclass?(" "+htmlclass):"")+'" '+(htmlclass?'style="display: none"':"") +' onclick="moderatePost(\''+post.getID()+'\')">Moderate</div>';
                action_ar.push(txt);
            }
        }

    %>
    <div class="caption">
    <%
         print(action_ar.join(""));
    %>
    </div>
    <%
    return "";
    });
    return postoptions;
};

app.Forum.html.form.postForm = function(shouldReturn){
    var oldprint = print;
    var s = "";
    if (shouldReturn){
        print = function(text) { s = s + text; };
    }
%>
    <div class="postForm" id="postForm">
         <form id="replyform">
         <div class="field">Your Reply: </div><textarea id="ncontent" rows=10 name="ncontent"></textarea>
         <div class="field"><input type="button" class="button" onclick="post()" value="Submit Your Reply"></div>
         </form>
    </div>
<%
    print = oldprint;
    return s;
};
%>
