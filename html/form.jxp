<%
app.Forum.html.form = {};
function stickyForm(id, action, text) { %>
<input type="submit" id="stickyform_<%= id %>" onclick="sticky('<%= id %>', '<%= action %>')" value="<%= text %>">
<% }

function editorPick(thread) {
         if(thread.editorPick) { %>
                <input type="checkbox" class="edPick" id="check<%= thread._id %>" onclick="togglePick('<%= thread._id %>')" checked>
         <% } else { %>
                <input type="checkbox" class="edPick" id="check<%= thread._id %>" onclick="togglePick('<%= thread._id %>')">
         <% }
}


app.Forum.html.exploreTopic = function(topic, indent, filter, select){
    retStr = "";
    indent = indent || 0;
    istr = "";
    if(! filter(topic)) return;
    for(var i = 0; i < indent; i++){
        istr += "&nbsp;";
    }
    var selected = (select(topic))? " selected=\"1\"" : "";
    retStr+="<option value=\""+topic._id+"\""+selected+">"+istr+content.HTML.escape(topic.name);
    if(topic.hidden) retStr += " (hidden)";
    retStr += "</option>";
    var subtopics = db.forum.topics.find( { parent : topic }).toArray();
    for(var j=0; j<subtopics.length; j++) {
        retStr += app.Forum.html.exploreTopic(subtopics[j], indent + 2, filter, select);
    }
    return retStr;
};


app.Forum.html.selectify = function(choices, attrfunc, options){
    // Create an action which, given an object, generates an HTML select
    // for all topics it could move to, recursively.
    //
    // choices is the array of topics, including possible special topics
    // for "Deleted" and "Moderated".
    //
    // attrfunc is a function which takes the object and returns a mapping
    // which is converted to attributes for the select object.
    //
    // options.filter is a function which takes the object we're generating
    // the select for and the choice we're putting in the select and returns
    // false to prune or true to not-prune that choice.

    //this is a psuedo topic and cannot be moved
    var deleteThread = app.Forum.Controller.hasPermission(user, "deleteThread");
    var moderateThread = app.Forum.Controller.hasPermission(user, "moderateThread");

    attrfunc = attrfunc || function (){ return {}; };
    options = options || {};
    var filter = (options.filter == null) ? function(){return true;} : options.filter;
    var select = (options.select == null) ? function(){return false;} : options.select;
    // return an action, which is a function which is called on each of several rows.
    return function(t){
        var retStr = "<select " +Util.format_htmlattr(attrfunc(t)) + ">";
        retStr+="<option value=\"\">&nbsp;</option>";
        for(i=0; i<choices.length; i++) {
            // Create new functions for exploreTopic which close over the thread.
            retStr += app.Forum.html.exploreTopic(choices[i], 0, function(choice){ return filter(t, choice); },
                                                  function(choice){ return select(t, choice); });
        }
        return retStr +"</select>";
    }
};



var suffix = "able|ible|al|ial|ed|en|er|est|ful|ic|ing|ion|tion|ation|ition|ity|ty|ive|ative|itive|less|ly|ment|ness|ous|eous|ious|s|es|y";
var prefix = "anti|de|dis|en|em|fore|in|im|il|ir|inter|mid|mis|non|over|pre|re|semi|sub|super|trans|un|under";

core.text.stem();

app.Forum.html.highlight = function(result, searchterm) {
    if(result == null)
        return;

    searchterm = Search.queryToArray(searchterm);

    for(var i=0; i<searchterm.length; i++) {
        var stem = Stem.stem(searchterm[i]);

        // go through result, replacing search terms with highlighted search terms
        var reg = new RegExp("(\\b)(("+prefix+")?"+stem+"("+suffix+")?)(\\b)", "gi");
        result = result.replace(reg, "$1<span class=\"highlight\">$2</span>$5");

    }
    return result;
}



app.Forum.html.form.hidden = function(topic){
         if(topic.hidden) { %>
                <input type="checkbox" class="edPick" id="check<%= topic._id %>" onclick="toggleHide('<%= topic._id %>')" checked>
         <% } else { %>
                <input type="checkbox" class="edPick" id="check<%= topic._id %>" onclick="toggleHide('<%= topic._id %>')">
         <% }

}

app.Forum.html.search = function(location) {
         %>
         <form action="search.jxp" class="search">
                <script type="text/javascript"> function clearBox() { document.getElementById("search").value = ""; } </script>
                <input type="text" class="text" name="query" value="search all posts in forum" id="search" onclick="clearBox()">
                <input type="submit" class="submit" value="Go">
         </form>
         <%
}

app.Forum.html.topicStack = function(tempTopic) {
     var topicStack = "";
     while(tempTopic.parent) {
          tempTopic = tempTopic.parent;
         topicStack = '<div class="mid_level top_level"><a href="viewtopic?name='+URL.escape_queryargs(tempTopic.name)+'">'+content.HTML.escape(tempTopic.name)+' </a></div>' + topicStack;
     }
     print(topicStack);
}

app.Forum.html.startBreadcrumbTable = function() {
    %>
    <table id="style1" cellspacing="0" >
    <tr>
    <th scope="col" class="article">
    <div class="top_level"><a href="index.jxp">forums </a></div>
    <%
}

app.Forum.html.endBreadcrumbTable = function() {
     %>
     </th>
     </tr>
     </table>
     <%
}

app.Forum.html.topicBreadcrumb = function(topic) {
    app.Forum.html.startBreadcrumbTable();
    app.Forum.html.topicStack(topic); %>
    <div class="second_level"><%= content.HTML.escape(topic.name) %></div><%
    app.Forum.html.endBreadcrumbTable();
}

app.Forum.html.breadcrumb = function(thread) {
    app.Forum.html.startBreadcrumbTable();
    app.Forum.html.topicStack(thread.topic); %>
    <div class="top_level mid_level"><a href="viewtopic?name=<%= URL.escape_queryargs( thread.topic.name )%>"><%= content.HTML.escape(thread.topic.name) %></a></div>
    <div class="second_level"><%= content.HTML.escape(thread.getTitle()) %></div><%
    app.Forum.html.endBreadcrumbTable();
}

app.Forum.html.form.makePostOptions = function(canSplit, canDelete, canModerate, thread){
    var postoptions = {replyable: false};
    postoptions.highlight = request.highlight;
    postoptions.htmlclass = function(t){ return t.deleted? t.deleted: ""; };

    var notdeleted = function(p) { if (p.deleted) return false; return true; };
    if(request.show) {
        postoptions.filter = function(p) { if (! p.deleted || p.deleted == request.show) return true;  return false; };
    }
    else {
        postoptions.filter = notdeleted;
    }
    var reps = thread.getReplies();
    var firstPost;

    for(var i = 0; i < reps.length; i++){
        if(notdeleted(reps[i])){ firstPost = reps[i]; break; }
    }

    postoptions.actions = [];
    postoptions.actions.push(function(post) {
        // Don't show split button whenever:
        // 1. the post is deleted
        // 2. the post is the first non-deleted post in the thread
        %>
        <form action="thread_action">
          <input type="hidden" name="threadId" value="<%= thread._id %>">
          <input type="hidden" name="select" value="<%= post.getID() %>">
          <% if(canSplit && notdeleted(post) && post.getID() != firstPost.getID()){ %>
          <input type="button" class="button" name="action" value="split" onclick="splitPopup(<%= post.getID() %>)"><%
             }
             if(post.deleted == "deleted" && canDelete) { %>
          <input type="submit" class="submit" name="action" value="undelete">
          <%
             }
             if(post.deleted == "moderated" && canModerate){ %>
          <input type="submit" class="submit" name="action" value="unmoderate">
          <%
             }
             if (thread.count > 1 && !post.deleted && canDelete){ %>
          <input type="submit" class="submit" name="action" value="delete">
          <%
             }
             if(thread.count > 1 && !post.deleted && canModerate){ %>
          <input type="submit" class="submit" name="action" value="moderate">
          <%
             }
             %>
          <div class="popup" id="splitpop<%= post.getID() %>">
            <%
               var choices = db.forum.topics.find({parent: null}).toArray();
               var deleteThread = app.Forum.Controller.hasPermission(user, "deleteThread");
               var moderateThread = app.Forum.Controller.hasPermission(user, "moderateThread");

               if(deleteThread)
                   choices.push({_id: app.Forum.Controller.specialDeletedID, name: "Delete"});

               if(moderateThread)
                   choices.push({_id: app.Forum.Controller.specialModeratedID, name: "Moderate"});
            %>
            <div class="stitle">Split Thread at Post</div>
            <div class="field"><label>New Subject:</label><input type="text" name="subject" value="<%= content.HTML.escape(thread.getTitle()) %>"></div>
            <div class="field"><label>Topic</label>
              <%= app.Forum.html.selectify(choices, function(x){ return {name: "topic"}; },
                                           {select: function(thread, o){ return o._id == thread.topic._id }})(thread) %>
            </div>
            <div class="field"><input type="button" class="button" value="cancel" onclick="cancelSplit(<%= post.getID() %>)"><input type="submit" class="submit" name="action" value="split"></div>
          </div>
        </form>
        <%
                 return "";
    });
    return postoptions;
};

%>
